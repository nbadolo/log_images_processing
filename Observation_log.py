#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri May 16 18:56:02 2025

@author: nbadolo
"""



import os
import csv
from astropy.io import fits
from datetime import datetime

# Dossier racine contenant tous les dossiers d‚Äô√©toiles
input_path = "/home/nbadolo/Bureau/Aymard/Donnees_sph/Gaussian"
racine = f"{input_path}/Input/large_log_+"

# Dossier o√π seront sauvegard√©s les fichiers de log
dossier_logs = f"{input_path}/Output/large_log_+/logs/"
os.makedirs(dossier_logs, exist_ok=True)  # Cr√©e le dossier s‚Äôil n'existe pas

# ======= CONFIGURATION =======

# Dossier racine contenant les sous-dossiers pour chaque √©toile

# Dossier o√π seront sauvegard√©s les fichiers logs (cr√©√© s'il n'existe pas)

# Cr√©ation d‚Äôun nom de fichier bas√© sur la date et l‚Äôheure actuelle
timestamp = datetime.now().strftime('%Y%m%d_%H%M')
log_file = os.path.join(dossier_logs, f'log_observations_{timestamp}.csv')

# Dictionnaire d√©finissant les champs √† extraire depuis les headers FITS
# La cl√© est le nom qui sera utilis√© dans le CSV,
# la valeur est la cl√© exacte du header FITS √† chercher
keywords = {
    'Date': 'DATE-OBS',                               # Date et heure d‚Äôobservation
    'Object': 'OBJECT',                               # Nom de l‚Äôobjet observ√©
    'ND': 'HIERARCH ESO INS3 OPTI2 NAME',            # Nom du filtre ND
    'Filter 1': 'HIERARCH ESO INS3 OPTI5 NAME',      # Nom du premier filtre
    'Filter 2': 'HIERARCH ESO INS3 OPTI6 NAME',      # Nom du deuxi√®me filtre
    'Seeing': 'HIERARCH ESO OBS AMBI FWHM',          # Valeur du seeing ambiant (FWHM)
    'Airmass': 'HIERARCH ESO OBS AIRM',               # Masse d‚Äôair √† l‚Äôobservation
}

# ======= INITIALISATION DES COMPTEURS =======

nb_total = 0      # Nombre total de dossiers √©toile analys√©s
nb_ok = 0         # Nombre de fichiers FITS trait√©s avec succ√®s
nb_erreurs = 0    # Nombre d‚Äôerreurs rencontr√©es √† la lecture des FITS
nb_sans_fits = 0  # Nombre de dossiers √©toile sans fichier FITS trouv√©

# ======= OUVERTURE DU FICHIER CSV POUR √âCRITURE =======

with open(log_file, mode='w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    # √âcriture de la ligne d‚Äôen-t√™te avec "Etoile" puis les cl√©s d√©finies dans keywords
    writer.writerow(['Etoile'] + list(keywords.keys()))

    # Parcours des dossiers dans le dossier racine (un dossier par √©toile)
    for etoile in os.listdir(racine):
        nb_total += 1
        dossier_etoile = os.path.join(racine, etoile)

        # Ignorer si ce n‚Äôest pas un dossier
        if not os.path.isdir(dossier_etoile):
            continue

        # Chemin vers le dossier qui contient les fichiers FITS (Intensity/star)
        dossier_star = os.path.join(dossier_etoile, 'Intensity', 'star')

        # Si ce dossier n‚Äôexiste pas, on le signale et on passe au suivant
        if not os.path.isdir(dossier_star):
            print(f"[!] Dossier manquant pour {etoile} : {dossier_star}")
            nb_sans_fits += 1
            continue

        found_fits = False  # Bool√©en pour savoir si on a trouv√© au moins un FITS

        # Recherche r√©cursive dans dossier_star pour trouver un fichier FITS
        for root, _, files in os.walk(dossier_star):
            for file in files:
                if file.endswith('.fits') or file.endswith('.fit'):
                    chemin_fits = os.path.join(root, file)
                    try:
                        # Ouverture du fichier FITS avec astropy
                        with fits.open(chemin_fits) as hdul:
                            header = hdul[0].header  # R√©cup√©ration du header du premier HDU

                            # Extraction des valeurs correspondant aux cl√©s dans keywords
                            ligne = [etoile]  # Premi√®re colonne = nom de l‚Äô√©toile
                            for key in keywords:
                                # R√©cup√©rer la valeur dans le header, 'N/A' si absente
                                val = header.get(keywords[key], 'N/A')
                                ligne.append(val)

                            # √âcriture de la ligne dans le fichier CSV
                            writer.writerow(ligne)

                            print(f"[‚úì] {etoile} trait√© : {file}")
                            nb_ok += 1
                            found_fits = True
                            break  # On ne traite qu‚Äôun FITS par √©toile

                    except Exception as e:
                        # En cas d‚Äôerreur √† l‚Äôouverture ou la lecture du FITS
                        print(f"[!] Erreur lecture FITS ({etoile}) : {e}")
                        nb_erreurs += 1
                        found_fits = True  # On consid√®re que le fichier est trouv√© m√™me s‚Äôil y a erreur
                        break
            if found_fits:
                break

        # Si aucun FITS n‚Äôa √©t√© trouv√© dans le dossier de l‚Äô√©toile
        if not found_fits:
            print(f"[!] Aucun fichier FITS trouv√© pour {etoile}")
            nb_sans_fits += 1

# ======= AFFICHAGE DU R√âSUM√â =======

print("\n========== R√âSUM√â DE L‚ÄôEX√âCUTION ==========")
print(f"üî¢ Total d‚Äô√©toiles trouv√©es : {nb_total}")
print(f"‚úÖ Observations trait√©es avec succ√®s : {nb_ok}")
print(f"‚ùå Erreurs lors de la lecture : {nb_erreurs}")
print(f"üö´ Aucun FITS trouv√© : {nb_sans_fits}")
print(f"üìÑ Log sauvegard√© dans : {log_file}")
